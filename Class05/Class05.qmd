---
title: "Class 5: Data Visualization with ggplot"
author: "Yvonne Yu (A16333006)"
format: pdf
toc: TRUE
---

Today we will have our first play with the **ggplot2** package - one of the most popular graphics package son the planet.

There are amny plotting systems in R. These include so called *"base"* plotting/graphics. 

```{r}
plot(cars)
```

Base plot is generally rather short code and somewhat dull plots ~ but it is always there for you and is fast for big data sets. 

If I want to use **ggplot2** it takes some more work. 

```{r}
# ggplot(cars)
```

I need to install the package first to my computer. To do this I can use the function `install.packages(ggplot2)`

Every time I want to use a pacakage I need to load it up with a `library()` call. 

```{r}

# install.packages(ggplot2)
library(ggplot2)
```

Now finally I can use ggplot

```{r}
ggplot(cars)
```

Every ggplot has at least 3 things:

- **data** (the data.frame with the data you want to plot)
- **aes** (the aesthetic mapping of the data to the plot)
- **geom** (how do you want the plot to look, points, lines, etc.)

```{r}
head(cars)
```

```{r}
ggplot(cars) +
  aes(x = speed, y = dist) +
  geom_point() 
```
```{r}
ggplot(cars) +
  aes(x = speed, y = dist) +
  geom_point() + geom_smooth()
```

I want a liner model and no standard error bounds shown. 

```{r}
bp<- ggplot(cars) + aes(x = speed, y = dist) + geom_point()
```

```{r}
bp + geom_smooth(se = FALSE, method = "lm") + 
  labs(title = "Stopping Distance of Old Cars", 
       x = "Speed (mph)", y = "Distance (ft)", 
       caption = "From the 'cars' dataset") + theme_bw()
```

## A more complicated scatter plot

Here we make a plot of gene expression data: 

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
```

```{r}
head(genes)
```

```{r}
nrow(genes)
colnames(genes)
ncol(genes)
table(genes$State)

```
```{r}
round(table(genes$State)[3]/ nrow(genes) * 100, 2)
```

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.percent <- n.up/n.gene * 100
round(up.percent, 2)
```

```{r}
t <- ggplot(genes) + aes(x=Condition1, 
                         y=Condition2, col = State) + geom_point()
```

Change the colors and the labels that were provided for the plot. 

```{r}
t + scale_colour_manual(values = c("blue", "grey", "red")) + 
  labs(title = "Gene Expression Changes with Drug Treatment", 
       x= "Control (no drug)", y= "Treated (drug)")
```

## Exploring the gapmider dataset

Here we will load up the gapmider dataset to get practice with different aes mappings. 

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapmider <- read.delim(url)
```

>Q. How many entries rows are in this dataset?

```{r}
nrow(gapmider)
```

>Q. How many columns are in this dataset?

```{r}
ncol(gapmider)
```

```{r}
dim(gapmider)
```
```{r}
head(gapmider)
```
```{r}
table(gapmider$year)
```
> Q. How many continents?

```{r}
table(gapmider$continent)
```
I could use the `unique()` function...

```{r}
length(unique(gapmider$continent))
```

> Q. How many countries are there in this dataset?

```{r}
# unique(gapmider$country)
length(unique(gapmider$country))
```

```{r}
ggplot(gapmider) + aes(x = gdpPercap, y = lifeExp) + 
  geom_point(alpha = 0.2)
```

```{r}
ggplot(gapmider) + aes(x = gdpPercap, y = lifeExp, 
                       col = continent, size = pop) + 
  geom_point(alpha = 0.2)
```

```{r}
library(dplyr)

gapminder_2007 <- gapmider %>% filter(year==2007)

head(gapminder_2007)
```

Plot of 2007 with population and continent data
```{r}
ggplot(gapminder_2007) + aes(x = gdpPercap, 
                             y = lifeExp, col = continent, 
                             size = pop) + 
  geom_point(alpha = 0.2)
```

```{r}
ggplot(gapmider) + aes(x = gdpPercap, y = lifeExp, 
                       col = continent, size = pop) + 
  geom_point(alpha = 0.2) + facet_wrap(~continent)
```


