---
title: "Class 7: Machine Learning 1"
author: "Yvonne Yu A16333006"
format: pdf
---

Today we will start our multi-part exploration of some key machine learning methods. We will begin with clustering - finding groupings in data, and then dimensionality reduction.

## Clustering

Let's start with "k-means" clustering. 
The main function in base R for this `kmeans()`. 

```{r}
# Make up some data
hist(rnorm(10000, mean = 3))
```

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now let's try out `kmeans()`.

```{r}
km <- kmeans(x, centers = 2)
km
```

```{r}
attributes(km)
```

> Q. How many points in each cluster?

```{r}
km$size
```
> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are centers/mean values of each cluster?

```{r}
km$centers
```
> Q. Make a plot of your data showing your clustering results. 

```{r}
plot(x, col=(km$cluster))
points(km$centers, col="green", pch = 15, cex = 3)
```

> Q. Run `kmeans()` again and cluster in 4 groups and plot the results. 

```{r}
new_km <- kmeans(x, centers = 4)
plot(x, col = new_km$cluster)
```

Biased because the clustering is based on random and between the points plotted on the graph. 

## Hierarchial Clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into a ever smaller number of clusters.

The main function in base R for this called `hclust()`. This function does not take our input data directly, but wants a "distance matrix" that details how (dis)similar all our input points are to each other. 

```{r}
head(dist(x))
```

```{r}
hc <- hclust(dist(x))
hc
```

The print out above is not very useful (unlike that from kmeans) but there is a useful `plot()` method.

```{r}
plot(hc)
abline (h = 10, col = "red")
```

The length of the bars in height determines the distance between the points, the branches are an indicator of how far that point/grouping is to another one. 

To get my main result (my cluster membership vector) I need to "cut" my tree using the function `cutree()`.

```{r}
grps <- cutree(hc, h = 10)
grps
```
```{r}
plot(x, col = grps)
```

The cutting of the tree will determine where the grouping separation will take place. By lowering the cut, the number of groups that would be identified would change. 

## Principal Component Analysis (PCA)

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are a useful bases for further analysis, like visualization, clustering, etc. 

Read in the data given. 
```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names = 1)
x
```

```{r}
barplot(as.matrix(x), beside = T, col = rainbow(nrow(x)))
```

The so-called "pairs" plot can be used for small datasets:

```{r}
pairs(x, col = rainbow(nrow(x)), pch = 16)
```

So the pairs plot is useful for small datasets but it can be losts of work to interpert and gets intractable for larger datasets. 

The main function to do PCA in base R is called `prcomp()`. This function wants the transpose of our data in this case. 

```{r}
pca <- prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```


```{r}
pca$x
```

A major PCA result viz is called a "PCA plot" (a.k.a: a score plot, biplot, PC1 vs PC2 plot, ordination plot)

```{r}
mycols <- c("orange", "red", "blue", "green")
plot(pca$x[,1], pca$x[,2], col = mycols, pch = 16, xlab = "PC1", ylab ="PC2")
abline(h=0, col = "gray")
abline(v=0, col = "gray")
```

Another important output from PCA is called the "loadings" vector or the "rotation" component - this tells us how much the original variables (the foods in this case) contribute to the new PCs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways. 


# PCA of RNASeq data 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```
```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
```

```{r}
summary(pca)
```

> Q. How many genes in this dataset?

```{r}
nrow(rna.data)
```

```{r}
attributes(pca)
```

```{r}
head(pca$x)
```

I will make a main result figure using ggplot: 

```{r}
library(ggplot2)
```
```{r}
res <- as.data.frame(pca$x)
```


```{r}
head(res)
```

```{r}
mycols <- c(rep("blue", 5), rep("red", 5))

ggplot(res, aes(x= PC1, y = PC2), label = row.names(res)) + geom_point(col = mycols)
```

```{r}
kmeans(pca$x[,1], centers=2)
```

PCA is used first as a filter to be able to look into the data, kmeans can be used to determine the clusters that are forming. 


