---
title: "Class 6: R functions"
author: "Yvonne Yu (A16333006)"
format: pdf
---

Functions are how we get work done in R. We call functions to do everything from reading data to doing analysis and outputing plots and results. 

All functions in R have at least 3 things: 

- a **name** (you get to pick this)
- input **arguments** (there can be only one or loads - again your call)
- **body** (where the work gets done, this code between the curly brackets)

## A first silly function

Let's write a function to add some numbers. We can call it `add()`

```{r}
x <- 10
y <- 10
x + y
```

```{r}
add <- function(x) {
  y <- 10
  x + y
}
```

Can I just use my new function? 

```{r}
add(1)
```

Let's make it a bit more flexible. 

```{r}
add <- function(x, y) {
  x + y
}

add(10,10)
```

## 2nd example grade() function

Write a function to grade student work.

We will start with a simple version of the problem and the following example student vectors:

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

```

This works out well because it shows the average of the new code

```{r}
mean(student1)
```
This doesn't work without the removal of the NA, but because there is only one NA, the average is still calculated. 

```{r}
mean(student2, na.rm = TRUE)
```
This doesn't work because only one of the values is an actual number, meaning that the calculation of the mean isn't reflective of the actual grade. 

```{r}
mean(student3, na.rm = TRUE)
```
Ok lets try to work with student1 and find (and drop) the lowest score. 

Google told me about min() and max(). 

```{r}
min(student1)
```

This shows the location of the smallest value. 
```{r}
which.min(student1)
```
```{r}
student1[which.min(student1)]
```

```{r}
mean(student1[-which.min(student1)])
```
```{r}
x <- student2
mean(x[-which.min(x)])
```

Our approach to the NA problem (missing homeworks): We can replace all NA values with 0. 

First task is to find the NA values (to see where they are in the vector)

```{r}
is.na(x)
```

I have found the NA (TRUE) values from `is.na()`, now I want to make them 0 (overwrite them/mask them)

```{r}
x[is.na(x) == TRUE] <- 0
x
```

```{r}
y <- 1:5
y 
y[y >3]
```
I want to combine the `is.na(x)` with making these elements equal to zero. And then take this "masked" (vector of student scores with NA values as zero) and drop the lowest and get th mean. 

```{r}
  x[is.na(x)] <- 0
  #prints out the new average
  mean(x[-which.min(x)])
```


Now I can turn my snipet into my first function. 

```{r}
grade <- function(arg1) {
  
  #replaces the NA with 0
  arg1[is.na(arg1)] <- 0
  
  #prints out the new average
  new_avg <- mean(arg1[-which.min(arg1)])
  
  #prints out the new list 
  print(new_avg)
}
```

```{r}
grade(x)
```

Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
head(gradebook)
```

The `apply()` function in R is super useful but can be a little confusing to begin with. 1 stands for the rows, while 2 stands for columns. 

```{r}
ans <- apply(gradebook,1, grade)
ans
```
Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]

```{r}
which.max(ans)
max(ans)
```

Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
which.min(apply(gradebook, 2, mean, na.rm = TRUE))

```
4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
#ans
cor(gradebook$hw1, ans)
```

```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```
```{r}
cor(mask$hw5, ans)
```
```{r}
apply(mask, 2, cor, y = ans)
which.max(apply(mask, 2, cor, y = ans))
```

